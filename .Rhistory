x1 <- rnorm(n)
x2 <- rbinom(n, 1, 0.5)
X  <- cbind(1, x1, x2)
w  <- runif(n, 0.8, 1.2)
beta_true <- c(2, 1.5, -0.5)
y <- as.vector(X %*% beta_true + rnorm(n))
#############################################################################
## 4. Parámetros
#############################################################################
tau       <- 0.25
n_iter    <- 12000
burn_in   <- 2000
thin_each <- 10
#############################################################################
## 5. Ejecuta y cronometra
#############################################################################
time_R <- system.time(
fit_R <- bayesQR_weighted(y, X, w, tau,
n_iter, burn_in, thin_each)
)["elapsed"]
time_C <- system.time(
fit_C <- MCMC_BWQR_AL(y, X, w, tau,
n_iter, burn_in, thin_each)
)["elapsed"]
#############################################################################
## 6. Resultados y diferencias
#############################################################################
beta_R   <- colMeans(fit_R$beta)
sigma_R  <- mean(fit_R$sigma)
beta_C   <- colMeans(fit_C$beta)
sigma_C  <- mean(fit_C$sigma)
results <- data.frame(
parameter   = c(paste0("beta", 0:(length(beta_R)-1)), "sigma"),
R_mean      = c(beta_R, sigma_R),
Cpp_mean    = c(beta_C, sigma_C),
R_minus_Cpp = c(beta_R - beta_C, sigma_R - sigma_C)
)
times <- data.frame(
version = c("R", "Cpp"),
seconds = c(time_R, time_C)
)
#############################################################################
## 7. Muestra en pantalla
#############################################################################
cat("\n► Diferencia de medias posteriores (R ‒ C++)\n")
print(results, digits = 6, row.names = FALSE)
cat("\n► Tiempo de ejecución (segundos)\n")
print(times, digits = 4, row.names = FALSE)
#############################################################################
## 0. Paquetes
#############################################################################
pkgs <- c("Rcpp", "RcppArmadillo", "mvtnorm", "GIGrvg")
for (p in pkgs)
if (!requireNamespace(p, quietly = TRUE))
install.packages(p, repos = "https://cloud.r-project.org")
lapply(pkgs, library, character.only = TRUE)
#############################################################################
## 1. Compila el C++ (exporta: MCMC_BWQR_AL)
#############################################################################
Rcpp::sourceCpp("src/NonCrossingBWQR_AL.cpp")   # ajusta ruta si es distinta
#############################################################################
## 2. Implementación R de bayesQR_weighted() (idéntica a tu original)
#############################################################################
atualizarBETA <- function(b, B, x, w, sigma, delta2, theta, v, dados) {
B.inv  <- chol2inv(chol(B))
covar  <- chol2inv(chol(B.inv + (1/(delta2 * sigma)) * t((w/v) * x) %*% x))
media  <- covar %*% (B.inv %*% b + (1/(delta2 * sigma)) *
t((w/v) * x) %*% (dados - theta * v))
as.numeric(mvtnorm::rmvnorm(1, media, covar))
}
atualizarSIGMA <- function(c, C, x, w, beta, tau2, theta, v, dados, n) {
alpha1 <- c + 1.5 * n
beta1  <- C + sum(w * v) +
t(w * (dados - x %*% beta - theta * v) / v) %*%
(dados - x %*% beta - theta * v) / (2 * tau2)
as.numeric(1 / rgamma(1, alpha1, beta1))
}
atualizarV <- function(dados, x, w, beta, delta2, theta, sigma, N) {
p1 <- 0.5
p2 <- w * (dados - x %*% beta)^2 / (delta2 * sigma)
p3 <- w * (2 / sigma + theta^2 / (delta2 * sigma))
v  <- numeric(N)
for (i in 1:N)
v[i] <- GIGrvg::rgig(1, chi = p2[i], psi = p3[i], lambda = p1)
v
}
bayesQR_weighted <- function(y, x, w, tau,
n_mcmc = 12000,
burnin_mcmc = 2000,
thin_mcmc = 10) {
n <- length(y);  p <- ncol(x)
beta_chain  <- matrix(NA, n_mcmc, p)
sigma_chain <- numeric(n_mcmc)
beta_chain[1, ] <- lm(y ~ -1 + x)$coef
sigma_chain[1]  <- 1
v <- rgamma(n, 2, 1)
delta2 <- 2 / (tau * (1 - tau))
theta  <- (1 - 2 * tau) / (tau * (1 - tau))
for (k in 2:n_mcmc) {
beta_chain[k, ] <- atualizarBETA(rep(0, p), diag(1000, p),
x, w, sigma_chain[k-1],
delta2, theta, v, y)
v <- atualizarV(y, x, w, beta_chain[k, ], delta2, theta, 1, n)
sigma_chain[k] <- atualizarSIGMA(0.001, 0.001, x, w,
beta_chain[k, ], delta2, theta,
v, y, n)
}
keep <- seq(burnin_mcmc + 1, n_mcmc, thin_mcmc)
list(beta  = beta_chain[keep, , drop = FALSE],
sigma = sigma_chain[keep])
}
#############################################################################
## 3. Datos sintéticos
#############################################################################
set.seed(123)
n  <- 200
x1 <- rnorm(n)
x2 <- rbinom(n, 1, 0.5)
X  <- cbind(1, x1, x2)
w  <- runif(n, 0.8, 1.2)
beta_true <- c(2, 1.5, -0.5)
y <- as.vector(X %*% beta_true + rnorm(n))
#############################################################################
## 4. Parámetros
#############################################################################
tau       <- 0.25
n_iter    <- 12000
burn_in   <- 2000
thin_each <- 10
#############################################################################
## 5. Ejecuta y cronometra
#############################################################################
time_R <- system.time(
fit_R <- bayesQR_weighted(y, X, w, tau,
n_iter, burn_in, thin_each)
)["elapsed"]
time_C <- system.time(
fit_C <- MCMC_BWQR_AL(y, X, w, tau,
n_iter, burn_in, thin_each)
)["elapsed"]
#############################################################################
## 6. Resultados y diferencias
#############################################################################
beta_R   <- colMeans(fit_R$beta)
sigma_R  <- mean(fit_R$sigma)
beta_C   <- colMeans(fit_C$beta)
sigma_C  <- mean(fit_C$sigma)
results <- data.frame(
parameter   = c(paste0("beta", 0:(length(beta_R)-1)), "sigma"),
R_mean      = c(beta_R, sigma_R),
Cpp_mean    = c(beta_C, sigma_C),
R_minus_Cpp = c(beta_R - beta_C, sigma_R - sigma_C)
)
times <- data.frame(
version = c("R", "Cpp"),
seconds = c(time_R, time_C)
)
#############################################################################
## 7. Muestra en pantalla
#############################################################################
cat("\n► Diferencia de medias posteriores (R ‒ C++)\n")
print(results, digits = 6, row.names = FALSE)
cat("\n► Tiempo de ejecución (segundos)\n")
print(times, digits = 4, row.names = FALSE)
#############################################################################
## 0. Paquetes
#############################################################################
pkgs <- c("Rcpp", "RcppArmadillo", "mvtnorm", "GIGrvg")
for (p in pkgs)
if (!requireNamespace(p, quietly = TRUE))
install.packages(p, repos = "https://cloud.r-project.org")
lapply(pkgs, library, character.only = TRUE)
#############################################################################
## 1. Compila el C++ (exporta: MCMC_BWQR_AL)
#############################################################################
Rcpp::sourceCpp("src/NonCrossingBWQR_AL.cpp")   # ajusta ruta si es distinta
#############################################################################
## 2. Implementación R de bayesQR_weighted() (idéntica a tu original)
#############################################################################
atualizarBETA <- function(b, B, x, w, sigma, delta2, theta, v, dados) {
B.inv  <- chol2inv(chol(B))
covar  <- chol2inv(chol(B.inv + (1/(delta2 * sigma)) * t((w/v) * x) %*% x))
media  <- covar %*% (B.inv %*% b + (1/(delta2 * sigma)) *
t((w/v) * x) %*% (dados - theta * v))
as.numeric(mvtnorm::rmvnorm(1, media, covar))
}
atualizarSIGMA <- function(c, C, x, w, beta, tau2, theta, v, dados, n) {
alpha1 <- c + 1.5 * n
beta1  <- C + sum(w * v) +
t(w * (dados - x %*% beta - theta * v) / v) %*%
(dados - x %*% beta - theta * v) / (2 * tau2)
as.numeric(1 / rgamma(1, alpha1, beta1))
}
atualizarV <- function(dados, x, w, beta, delta2, theta, sigma, N) {
p1 <- 0.5
p2 <- w * (dados - x %*% beta)^2 / (delta2 * sigma)
p3 <- w * (2 / sigma + theta^2 / (delta2 * sigma))
v  <- numeric(N)
for (i in 1:N)
v[i] <- GIGrvg::rgig(1, chi = p2[i], psi = p3[i], lambda = p1)
v
}
bayesQR_weighted <- function(y, x, w, tau,
n_mcmc = 12000,
burnin_mcmc = 2000,
thin_mcmc = 10) {
n <- length(y);  p <- ncol(x)
beta_chain  <- matrix(NA, n_mcmc, p)
sigma_chain <- numeric(n_mcmc)
beta_chain[1, ] <- lm(y ~ -1 + x)$coef
sigma_chain[1]  <- 1
v <- rgamma(n, 2, 1)
delta2 <- 2 / (tau * (1 - tau))
theta  <- (1 - 2 * tau) / (tau * (1 - tau))
for (k in 2:n_mcmc) {
beta_chain[k, ] <- atualizarBETA(rep(0, p), diag(1000, p),
x, w, sigma_chain[k-1],
delta2, theta, v, y)
v <- atualizarV(y, x, w, beta_chain[k, ], delta2, theta, 1, n)
sigma_chain[k] <- atualizarSIGMA(0.001, 0.001, x, w,
beta_chain[k, ], delta2, theta,
v, y, n)
}
keep <- seq(burnin_mcmc + 1, n_mcmc, thin_mcmc)
list(beta  = beta_chain[keep, , drop = FALSE],
sigma = sigma_chain[keep])
}
#############################################################################
## 3. Datos sintéticos
#############################################################################
set.seed(123)
n  <- 200
x1 <- rnorm(n)
x2 <- rbinom(n, 1, 0.5)
X  <- cbind(1, x1, x2)
w  <- runif(n, 0.8, 1.2)
beta_true <- c(2, 1.5, -0.5)
y <- as.vector(X %*% beta_true + rnorm(n))
#############################################################################
## 4. Parámetros
#############################################################################
tau       <- 0.25
n_iter    <- 12000
burn_in   <- 2000
thin_each <- 10
#############################################################################
## 5. Ejecuta y cronometra
#############################################################################
time_R <- system.time(
fit_R <- bayesQR_weighted(y, X, w, tau,
n_iter, burn_in, thin_each)
)["elapsed"]
time_C <- system.time(
fit_C <- MCMC_BWQR_AL(y, X, w, tau,
n_iter, burn_in, thin_each)
)["elapsed"]
#############################################################################
## 6. Resultados y diferencias
#############################################################################
beta_R   <- colMeans(fit_R$beta)
sigma_R  <- mean(fit_R$sigma)
beta_C   <- colMeans(fit_C$beta)
sigma_C  <- mean(fit_C$sigma)
results <- data.frame(
parameter   = c(paste0("beta", 0:(length(beta_R)-1)), "sigma"),
R_mean      = c(beta_R, sigma_R),
Cpp_mean    = c(beta_C, sigma_C),
R_minus_Cpp = c(beta_R - beta_C, sigma_R - sigma_C)
)
times <- data.frame(
version = c("R", "Cpp"),
seconds = c(time_R, time_C)
)
#############################################################################
## 7. Muestra en pantalla
#############################################################################
cat("\n► Diferencia de medias posteriores (R ‒ C++)\n")
print(results, digits = 6, row.names = FALSE)
cat("\n► Tiempo de ejecución (segundos)\n")
print(times, digits = 4, row.names = FALSE)
#############################################################################
## 0. Paquetes
#############################################################################
pkgs <- c("Rcpp", "RcppArmadillo", "mvtnorm", "GIGrvg")
for (p in pkgs)
if (!requireNamespace(p, quietly = TRUE))
install.packages(p, repos = "https://cloud.r-project.org")
lapply(pkgs, library, character.only = TRUE)
#############################################################################
## 1. Compila el C++ (exporta: MCMC_BWQR_AL)
#############################################################################
Rcpp::sourceCpp("src/NonCrossingBWQR_AL.cpp")   # ajusta ruta si es distinta
#############################################################################
## 2. Implementación R de bayesQR_weighted() (idéntica a tu original)
#############################################################################
atualizarBETA <- function(b, B, x, w, sigma, delta2, theta, v, dados) {
B.inv  <- chol2inv(chol(B))
covar  <- chol2inv(chol(B.inv + (1/(delta2 * sigma)) * t((w/v) * x) %*% x))
media  <- covar %*% (B.inv %*% b + (1/(delta2 * sigma)) *
t((w/v) * x) %*% (dados - theta * v))
as.numeric(mvtnorm::rmvnorm(1, media, covar))
}
atualizarSIGMA <- function(c, C, x, w, beta, tau2, theta, v, dados, n) {
alpha1 <- c + 1.5 * n
beta1  <- C + sum(w * v) +
t(w * (dados - x %*% beta - theta * v) / v) %*%
(dados - x %*% beta - theta * v) / (2 * tau2)
as.numeric(1 / rgamma(1, alpha1, beta1))
}
atualizarV <- function(dados, x, w, beta, delta2, theta, sigma, N) {
p1 <- 0.5
p2 <- w * (dados - x %*% beta)^2 / (delta2 * sigma)
p3 <- w * (2 / sigma + theta^2 / (delta2 * sigma))
v  <- numeric(N)
for (i in 1:N)
v[i] <- GIGrvg::rgig(1, chi = p2[i], psi = p3[i], lambda = p1)
v
}
bayesQR_weighted <- function(y, x, w, tau,
n_mcmc = 12000,
burnin_mcmc = 2000,
thin_mcmc = 10) {
n <- length(y);  p <- ncol(x)
beta_chain  <- matrix(NA, n_mcmc, p)
sigma_chain <- numeric(n_mcmc)
beta_chain[1, ] <- lm(y ~ -1 + x)$coef
sigma_chain[1]  <- 1
v <- rgamma(n, 2, 1)
delta2 <- 2 / (tau * (1 - tau))
theta  <- (1 - 2 * tau) / (tau * (1 - tau))
for (k in 2:n_mcmc) {
beta_chain[k, ] <- atualizarBETA(rep(0, p), diag(1000, p),
x, w, sigma_chain[k-1],
delta2, theta, v, y)
v <- atualizarV(y, x, w, beta_chain[k, ], delta2, theta, 1, n)
sigma_chain[k] <- atualizarSIGMA(0.001, 0.001, x, w,
beta_chain[k, ], delta2, theta,
v, y, n)
}
keep <- seq(burnin_mcmc + 1, n_mcmc, thin_mcmc)
list(beta  = beta_chain[keep, , drop = FALSE],
sigma = sigma_chain[keep])
}
#############################################################################
## 3. Datos sintéticos
#############################################################################
set.seed(123)
n  <- 200
x1 <- rnorm(n)
x2 <- rbinom(n, 1, 0.5)
X  <- cbind(1, x1, x2)
w  <- runif(n, 0.8, 1.2)
beta_true <- c(2, 1.5, -0.5)
y <- as.vector(X %*% beta_true + rnorm(n))
#############################################################################
## 4. Parámetros
#############################################################################
tau       <- 0.25
n_iter    <- 12000
burn_in   <- 2000
thin_each <- 10
#############################################################################
## 5. Ejecuta y cronometra
#############################################################################
time_R <- system.time(
fit_R <- bayesQR_weighted(y, X, w, tau,
n_iter, burn_in, thin_each)
)["elapsed"]
time_C <- system.time(
fit_C <- MCMC_BWQR_AL(y, X, w, tau,
n_iter, burn_in, thin_each)
)["elapsed"]
#############################################################################
## 6. Resultados y diferencias
#############################################################################
beta_R   <- colMeans(fit_R$beta)
sigma_R  <- mean(fit_R$sigma)
beta_C   <- colMeans(fit_C$beta)
sigma_C  <- mean(fit_C$sigma)
results <- data.frame(
parameter   = c(paste0("beta", 0:(length(beta_R)-1)), "sigma"),
R_mean      = c(beta_R, sigma_R),
Cpp_mean    = c(beta_C, sigma_C),
R_minus_Cpp = c(beta_R - beta_C, sigma_R - sigma_C)
)
times <- data.frame(
version = c("R", "Cpp"),
seconds = c(time_R, time_C)
)
#############################################################################
## 7. Muestra en pantalla
#############################################################################
cat("\n► Diferencia de medias posteriores (R ‒ C++)\n")
print(results, digits = 6, row.names = FALSE)
cat("\n► Tiempo de ejecución (segundos)\n")
print(times, digits = 4, row.names = FALSE)
#############################################################################
## 0. Paquetes
#############################################################################
pkgs <- c("Rcpp", "RcppArmadillo", "mvtnorm", "GIGrvg")
for (p in pkgs)
if (!requireNamespace(p, quietly = TRUE))
install.packages(p, repos = "https://cloud.r-project.org")
lapply(pkgs, library, character.only = TRUE)
#############################################################################
## 1. Compila el C++ (exporta: MCMC_BWQR_AL)
#############################################################################
Rcpp::sourceCpp("src/NonCrossingBWQR_AL.cpp")   # ajusta ruta si es distinta
#############################################################################
## 2. Implementación R de bayesQR_weighted() (idéntica a tu original)
#############################################################################
atualizarBETA <- function(b, B, x, w, sigma, delta2, theta, v, dados) {
B.inv  <- chol2inv(chol(B))
covar  <- chol2inv(chol(B.inv + (1/(delta2 * sigma)) * t((w/v) * x) %*% x))
media  <- covar %*% (B.inv %*% b + (1/(delta2 * sigma)) *
t((w/v) * x) %*% (dados - theta * v))
as.numeric(mvtnorm::rmvnorm(1, media, covar))
}
atualizarSIGMA <- function(c, C, x, w, beta, tau2, theta, v, dados, n) {
alpha1 <- c + 1.5 * n
beta1  <- C + sum(w * v) +
t(w * (dados - x %*% beta - theta * v) / v) %*%
(dados - x %*% beta - theta * v) / (2 * tau2)
as.numeric(1 / rgamma(1, alpha1, beta1))
}
atualizarV <- function(dados, x, w, beta, delta2, theta, sigma, N) {
p1 <- 0.5
p2 <- w * (dados - x %*% beta)^2 / (delta2 * sigma)
p3 <- w * (2 / sigma + theta^2 / (delta2 * sigma))
v  <- numeric(N)
for (i in 1:N)
v[i] <- GIGrvg::rgig(1, chi = p2[i], psi = p3[i], lambda = p1)
v
}
bayesQR_weighted <- function(y, x, w, tau,
n_mcmc = 12000,
burnin_mcmc = 2000,
thin_mcmc = 10) {
n <- length(y);  p <- ncol(x)
beta_chain  <- matrix(NA, n_mcmc, p)
sigma_chain <- numeric(n_mcmc)
beta_chain[1, ] <- lm(y ~ -1 + x)$coef
sigma_chain[1]  <- 1
v <- rgamma(n, 2, 1)
delta2 <- 2 / (tau * (1 - tau))
theta  <- (1 - 2 * tau) / (tau * (1 - tau))
for (k in 2:n_mcmc) {
beta_chain[k, ] <- atualizarBETA(rep(0, p), diag(1000, p),
x, w, sigma_chain[k-1],
delta2, theta, v, y)
v <- atualizarV(y, x, w, beta_chain[k, ], delta2, theta, 1, n)
sigma_chain[k] <- atualizarSIGMA(0.001, 0.001, x, w,
beta_chain[k, ], delta2, theta,
v, y, n)
}
keep <- seq(burnin_mcmc + 1, n_mcmc, thin_mcmc)
list(beta  = beta_chain[keep, , drop = FALSE],
sigma = sigma_chain[keep])
}
#############################################################################
## 3. Datos sintéticos
#############################################################################
set.seed(123)
n  <- 200
x1 <- rnorm(n)
x2 <- rbinom(n, 1, 0.5)
X  <- cbind(1, x1, x2)
w  <- runif(n, 0.8, 1.2)
beta_true <- c(2, 1.5, -0.5)
y <- as.vector(X %*% beta_true + rnorm(n))
#############################################################################
## 4. Parámetros
#############################################################################
tau       <- 0.25
n_iter    <- 12000
burn_in   <- 2000
thin_each <- 10
#############################################################################
## 5. Ejecuta y cronometra
#############################################################################
time_R <- system.time(
fit_R <- bayesQR_weighted(y, X, w, tau,
n_iter, burn_in, thin_each)
)["elapsed"]
time_C <- system.time(
fit_C <- MCMC_BWQR_AL(y, X, w, tau,
n_iter, burn_in, thin_each)
)["elapsed"]
#############################################################################
## 6. Resultados y diferencias
#############################################################################
beta_R   <- colMeans(fit_R$beta)
sigma_R  <- mean(fit_R$sigma)
beta_C   <- colMeans(fit_C$beta)
sigma_C  <- mean(fit_C$sigma)
results <- data.frame(
parameter   = c(paste0("beta", 0:(length(beta_R)-1)), "sigma"),
R_mean      = c(beta_R, sigma_R),
Cpp_mean    = c(beta_C, sigma_C),
R_minus_Cpp = c(beta_R - beta_C, sigma_R - sigma_C)
)
times <- data.frame(
version = c("R", "Cpp"),
seconds = c(time_R, time_C)
)
#############################################################################
## 7. Muestra en pantalla
#############################################################################
cat("\n► Diferencia de medias posteriores (R ‒ C++)\n")
print(results, digits = 6, row.names = FALSE)
cat("\n► Tiempo de ejecución (segundos)\n")
print(times, digits = 4, row.names = FALSE)
