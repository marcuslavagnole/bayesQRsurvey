// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bayesQR_weighted_EM_cpp
List bayesQR_weighted_EM_cpp(const Eigen::MatrixXd& y, const Eigen::MatrixXd& x, const Eigen::VectorXd& w, const Eigen::VectorXd& u, const Eigen::VectorXd& gamma_u, double tau, const Eigen::VectorXd& mu0, const Eigen::MatrixXd& sigma0, double a0, double b0);
RcppExport SEXP _tauBayesW_bayesQR_weighted_EM_cpp(SEXP ySEXP, SEXP xSEXP, SEXP wSEXP, SEXP uSEXP, SEXP gamma_uSEXP, SEXP tauSEXP, SEXP mu0SEXP, SEXP sigma0SEXP, SEXP a0SEXP, SEXP b0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma_u(gamma_uSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type sigma0(sigma0SEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    rcpp_result_gen = Rcpp::wrap(bayesQR_weighted_EM_cpp(y, x, w, u, gamma_u, tau, mu0, sigma0, a0, b0));
    return rcpp_result_gen;
END_RCPP
}
// MCMC_BWQR_AL
Rcpp::List MCMC_BWQR_AL(const arma::vec& y, const arma::mat& X, const arma::vec& w, double tau, int n_mcmc, int burnin, int thin);
RcppExport SEXP _tauBayesW_MCMC_BWQR_AL(SEXP ySEXP, SEXP XSEXP, SEXP wSEXP, SEXP tauSEXP, SEXP n_mcmcSEXP, SEXP burninSEXP, SEXP thinSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_BWQR_AL(y, X, w, tau, n_mcmc, burnin, thin));
    return rcpp_result_gen;
END_RCPP
}
// MCMC_BWQR_AP
Rcpp::List MCMC_BWQR_AP(const arma::vec& y, const arma::mat& X, const arma::vec& w, double tau, int n_mcmc, int burnin, int thin, double w_scale, Rcpp::Nullable<Rcpp::NumericVector> b0_, Rcpp::Nullable<Rcpp::NumericMatrix> B0_);
RcppExport SEXP _tauBayesW_MCMC_BWQR_AP(SEXP ySEXP, SEXP XSEXP, SEXP wSEXP, SEXP tauSEXP, SEXP n_mcmcSEXP, SEXP burninSEXP, SEXP thinSEXP, SEXP w_scaleSEXP, SEXP b0_SEXP, SEXP B0_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< double >::type w_scale(w_scaleSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type b0_(b0_SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type B0_(B0_SEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_BWQR_AP(y, X, w, tau, n_mcmc, burnin, thin, w_scale, b0_, B0_));
    return rcpp_result_gen;
END_RCPP
}
// MCMC_BWQR_SL
Rcpp::List MCMC_BWQR_SL(const arma::vec& y, const arma::mat& X, const arma::vec& w, double tau, int n_mcmc, int burnin, int thin, Rcpp::Nullable<Rcpp::NumericVector> b0_, Rcpp::Nullable<Rcpp::NumericMatrix> B0_);
RcppExport SEXP _tauBayesW_MCMC_BWQR_SL(SEXP ySEXP, SEXP XSEXP, SEXP wSEXP, SEXP tauSEXP, SEXP n_mcmcSEXP, SEXP burninSEXP, SEXP thinSEXP, SEXP b0_SEXP, SEXP B0_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type b0_(b0_SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type B0_(B0_SEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_BWQR_SL(y, X, w, tau, n_mcmc, burnin, thin, b0_, B0_));
    return rcpp_result_gen;
END_RCPP
}
// atualizarV_GIG
arma::vec atualizarV_GIG(const arma::vec& y, const arma::mat& X, const arma::vec& w, const arma::vec& beta, double delta2, double theta, double sigma, int N);
RcppExport SEXP _tauBayesW_atualizarV_GIG(SEXP ySEXP, SEXP XSEXP, SEXP wSEXP, SEXP betaSEXP, SEXP delta2SEXP, SEXP thetaSEXP, SEXP sigmaSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(atualizarV_GIG(y, X, w, beta, delta2, theta, sigma, N));
    return rcpp_result_gen;
END_RCPP
}
// atualizarBETA
arma::vec atualizarBETA(const arma::vec& b, const arma::mat& B, const arma::mat& X, const arma::vec& w, double sigma, double delta2, double theta, const arma::vec& v, const arma::vec& y);
RcppExport SEXP _tauBayesW_atualizarBETA(SEXP bSEXP, SEXP BSEXP, SEXP XSEXP, SEXP wSEXP, SEXP sigmaSEXP, SEXP delta2SEXP, SEXP thetaSEXP, SEXP vSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type delta2(delta2SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(atualizarBETA(b, B, X, w, sigma, delta2, theta, v, y));
    return rcpp_result_gen;
END_RCPP
}
// atualizarSIGMA
double atualizarSIGMA(double c0, double C0, const arma::mat& X, const arma::vec& w, const arma::vec& beta, double tau2, double theta, const arma::vec& v, const arma::vec& y, int n);
RcppExport SEXP _tauBayesW_atualizarSIGMA(SEXP c0SEXP, SEXP C0SEXP, SEXP XSEXP, SEXP wSEXP, SEXP betaSEXP, SEXP tau2SEXP, SEXP thetaSEXP, SEXP vSEXP, SEXP ySEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< double >::type C0(C0SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(atualizarSIGMA(c0, C0, X, w, beta, tau2, theta, v, y, n));
    return rcpp_result_gen;
END_RCPP
}
// bayesQRWeighted
Rcpp::List bayesQRWeighted(const arma::vec& y, const arma::mat& X, const arma::vec& w, double tau, int n_mcmc, int burnin_mcmc, int thin_mcmc);
RcppExport SEXP _tauBayesW_bayesQRWeighted(SEXP ySEXP, SEXP XSEXP, SEXP wSEXP, SEXP tauSEXP, SEXP n_mcmcSEXP, SEXP burnin_mcmcSEXP, SEXP thin_mcmcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type burnin_mcmc(burnin_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type thin_mcmc(thin_mcmcSEXP);
    rcpp_result_gen = Rcpp::wrap(bayesQRWeighted(y, X, w, tau, n_mcmc, burnin_mcmc, thin_mcmc));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tauBayesW_bayesQR_weighted_EM_cpp", (DL_FUNC) &_tauBayesW_bayesQR_weighted_EM_cpp, 10},
    {"_tauBayesW_MCMC_BWQR_AL", (DL_FUNC) &_tauBayesW_MCMC_BWQR_AL, 7},
    {"_tauBayesW_MCMC_BWQR_AP", (DL_FUNC) &_tauBayesW_MCMC_BWQR_AP, 10},
    {"_tauBayesW_MCMC_BWQR_SL", (DL_FUNC) &_tauBayesW_MCMC_BWQR_SL, 9},
    {"_tauBayesW_atualizarV_GIG", (DL_FUNC) &_tauBayesW_atualizarV_GIG, 8},
    {"_tauBayesW_atualizarBETA", (DL_FUNC) &_tauBayesW_atualizarBETA, 9},
    {"_tauBayesW_atualizarSIGMA", (DL_FUNC) &_tauBayesW_atualizarSIGMA, 10},
    {"_tauBayesW_bayesQRWeighted", (DL_FUNC) &_tauBayesW_bayesQRWeighted, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_tauBayesW(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
