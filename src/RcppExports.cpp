// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/tauBayesW.h"
#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bwqr_weighted_em_cpp_wrap
Rcpp::List bwqr_weighted_em_cpp_wrap(const Eigen::MatrixXd& y, const Eigen::MatrixXd& x, const Eigen::VectorXd& w, const Eigen::VectorXd& u, const Eigen::VectorXd& gamma_u, double tau, const Eigen::VectorXd& mu0, const Eigen::MatrixXd& sigma0, double a0, double b0, double eps, int max_iter, bool verbose);
RcppExport SEXP _tauBayesW_bwqr_weighted_em_cpp_wrap(SEXP ySEXP, SEXP xSEXP, SEXP wSEXP, SEXP uSEXP, SEXP gamma_uSEXP, SEXP tauSEXP, SEXP mu0SEXP, SEXP sigma0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP epsSEXP, SEXP max_iterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type w(wSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type gamma_u(gamma_uSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type sigma0(sigma0SEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(bwqr_weighted_em_cpp_wrap(y, x, w, u, gamma_u, tau, mu0, sigma0, a0, b0, eps, max_iter, verbose));
    return rcpp_result_gen;
END_RCPP
}
// MCMC_BWQR_AL_wrap
Rcpp::List MCMC_BWQR_AL_wrap(const arma::vec& y, const arma::mat& X, const arma::vec& w, double tau, int n_mcmc, int burnin, int thin, Rcpp::Nullable<Rcpp::NumericVector> b_prior_mean, Rcpp::Nullable<Rcpp::NumericMatrix> B_prior_prec, double c0, double C0);
RcppExport SEXP _tauBayesW_MCMC_BWQR_AL_wrap(SEXP ySEXP, SEXP XSEXP, SEXP wSEXP, SEXP tauSEXP, SEXP n_mcmcSEXP, SEXP burninSEXP, SEXP thinSEXP, SEXP b_prior_meanSEXP, SEXP B_prior_precSEXP, SEXP c0SEXP, SEXP C0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type b_prior_mean(b_prior_meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type B_prior_prec(B_prior_precSEXP);
    Rcpp::traits::input_parameter< double >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< double >::type C0(C0SEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_BWQR_AL_wrap(y, X, w, tau, n_mcmc, burnin, thin, b_prior_mean, B_prior_prec, c0, C0));
    return rcpp_result_gen;
END_RCPP
}
// MCMC_BWQR_AP_wrap
Rcpp::List MCMC_BWQR_AP_wrap(const arma::vec& y, const arma::mat& X, const arma::vec& w, int n_mcmc, int burnin, int thin, double tau, Rcpp::Nullable<Rcpp::NumericVector> b_prior_mean, Rcpp::Nullable<Rcpp::NumericMatrix> B_prior_prec);
RcppExport SEXP _tauBayesW_MCMC_BWQR_AP_wrap(SEXP ySEXP, SEXP XSEXP, SEXP wSEXP, SEXP n_mcmcSEXP, SEXP burninSEXP, SEXP thinSEXP, SEXP tauSEXP, SEXP b_prior_meanSEXP, SEXP B_prior_precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type b_prior_mean(b_prior_meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type B_prior_prec(B_prior_precSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_BWQR_AP_wrap(y, X, w, n_mcmc, burnin, thin, tau, b_prior_mean, B_prior_prec));
    return rcpp_result_gen;
END_RCPP
}
// MCMC_BWQR_SL_wrap
Rcpp::List MCMC_BWQR_SL_wrap(const arma::vec& y, const arma::mat& X, const arma::vec& w, double tau, int n_mcmc, int burnin, int thin, Rcpp::Nullable<Rcpp::NumericVector> b_prior_mean, Rcpp::Nullable<Rcpp::NumericMatrix> B_prior_prec);
RcppExport SEXP _tauBayesW_MCMC_BWQR_SL_wrap(SEXP ySEXP, SEXP XSEXP, SEXP wSEXP, SEXP tauSEXP, SEXP n_mcmcSEXP, SEXP burninSEXP, SEXP thinSEXP, SEXP b_prior_meanSEXP, SEXP B_prior_precSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type w(wSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type n_mcmc(n_mcmcSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type b_prior_mean(b_prior_meanSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type B_prior_prec(B_prior_precSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_BWQR_SL_wrap(y, X, w, tau, n_mcmc, burnin, thin, b_prior_mean, B_prior_prec));
    return rcpp_result_gen;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _tauBayesW_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _tauBayesW_RcppExport_registerCCallable() { 
    R_RegisterCCallable("tauBayesW", "_tauBayesW_RcppExport_validate", (DL_FUNC)_tauBayesW_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_tauBayesW_bwqr_weighted_em_cpp_wrap", (DL_FUNC) &_tauBayesW_bwqr_weighted_em_cpp_wrap, 13},
    {"_tauBayesW_MCMC_BWQR_AL_wrap", (DL_FUNC) &_tauBayesW_MCMC_BWQR_AL_wrap, 11},
    {"_tauBayesW_MCMC_BWQR_AP_wrap", (DL_FUNC) &_tauBayesW_MCMC_BWQR_AP_wrap, 9},
    {"_tauBayesW_MCMC_BWQR_SL_wrap", (DL_FUNC) &_tauBayesW_MCMC_BWQR_SL_wrap, 9},
    {"_tauBayesW_RcppExport_registerCCallable", (DL_FUNC) &_tauBayesW_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_tauBayesW(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
